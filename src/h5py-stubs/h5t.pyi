from typing import Any, ClassVar, NamedTuple

import h5py._objects
import h5py.h5
import numpy

ARRAY: int
BITFIELD: int
BKG_NO: int
BKG_TEMP: int
BKG_YES: int
COMPOUND: int
CSET_ASCII: int
CSET_UTF8: int
C_S1: TypeStringID
DIR_ASCEND: int
DIR_DEFAULT: int
DIR_DESCEND: int
ENUM: int
FLOAT: int
FORTRAN_S1: TypeStringID
IEEE_F128BE: TypeFloatID
IEEE_F128LE: TypeFloatID
IEEE_F16BE: TypeFloatID
IEEE_F16LE: TypeFloatID
IEEE_F32BE: TypeFloatID
IEEE_F32LE: TypeFloatID
IEEE_F64BE: TypeFloatID
IEEE_F64LE: TypeFloatID
INTEGER: int
LDOUBLE_BE: TypeFloatID
LDOUBLE_LE: TypeFloatID
NATIVE_B16: TypeBitfieldID
NATIVE_B32: TypeBitfieldID
NATIVE_B64: TypeBitfieldID
NATIVE_B8: TypeBitfieldID
NATIVE_DOUBLE: TypeFloatID
NATIVE_FLOAT: TypeFloatID
NATIVE_INT16: TypeIntegerID
NATIVE_INT32: TypeIntegerID
NATIVE_INT64: TypeIntegerID
NATIVE_INT8: TypeIntegerID
NATIVE_LDOUBLE: TypeFloatID
NATIVE_UINT16: TypeIntegerID
NATIVE_UINT32: TypeIntegerID
NATIVE_UINT64: TypeIntegerID
NATIVE_UINT8: TypeIntegerID
NORM_IMPLIED: int
NORM_MSBSET: int
NORM_NONE: int
NO_CLASS: int
OPAQUE: int
ORDER_BE: int
ORDER_LE: int
ORDER_NATIVE: int
ORDER_NONE: int
ORDER_VAX: int
PAD_BACKGROUND: int
PAD_ONE: int
PAD_ZERO: int
PYTHON_OBJECT: TypeOpaqueID
REFERENCE: int
SGN_2: int
SGN_NONE: int
STD_B16BE: TypeBitfieldID
STD_B16LE: TypeBitfieldID
STD_B32BE: TypeBitfieldID
STD_B32LE: TypeBitfieldID
STD_B64BE: TypeBitfieldID
STD_B64LE: TypeBitfieldID
STD_B8BE: TypeBitfieldID
STD_B8LE: TypeBitfieldID
STD_I16BE: TypeIntegerID
STD_I16LE: TypeIntegerID
STD_I32BE: TypeIntegerID
STD_I32LE: TypeIntegerID
STD_I64BE: TypeIntegerID
STD_I64LE: TypeIntegerID
STD_I8BE: TypeIntegerID
STD_I8LE: TypeIntegerID
STD_REF_DSETREG: TypeReferenceID
STD_REF_OBJ: TypeReferenceID
STD_U16BE: TypeIntegerID
STD_U16LE: TypeIntegerID
STD_U32BE: TypeIntegerID
STD_U32LE: TypeIntegerID
STD_U64BE: TypeIntegerID
STD_U64LE: TypeIntegerID
STD_U8BE: TypeIntegerID
STD_U8LE: TypeIntegerID
STRING: int
STR_NULLPAD: int
STR_NULLTERM: int
STR_SPACEPAD: int
TIME: int
UNIX_D32BE: TypeTimeID
UNIX_D32LE: TypeTimeID
UNIX_D64BE: TypeTimeID
UNIX_D64LE: TypeTimeID
VARIABLE: int
VLEN: int

def array_create(*args, **kwargs) -> Any: ...

cfg: h5py.h5.H5PYConfig

def check_dtype(*args, **kwargs) -> Any: ...
def convert(*args, **kwargs) -> Any: ...
def create(*args, **kwargs) -> Any: ...
def decode(*args, **kwargs) -> Any: ...
def enum_create(*args, **kwargs) -> Any: ...
def find(*args, **kwargs) -> Any: ...

namedtuple: function

def open(*args, **kwargs) -> Any: ...

phil: h5py._objects.FastRLock
ref_dtype: numpy.dtype[numpy.object_]
regionref_dtype: numpy.dtype[numpy.object_]

def special_dtype(*args, **kwargs) -> Any: ...
def vlen_create(*args, **kwargs) -> Any: ...

class TypeArrayID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_array_dims(self, *args, **kwargs) -> Any: ...
    def get_array_ndims(self, *args, **kwargs) -> Any: ...

class TypeAtomicID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_offset(self, *args, **kwargs) -> Any: ...
    def get_order(self, *args, **kwargs) -> Any: ...
    def get_pad(self, *args, **kwargs) -> Any: ...
    def get_precision(self, *args, **kwargs) -> Any: ...
    def set_offset(self, *args, **kwargs) -> Any: ...
    def set_order(self, *args, **kwargs) -> Any: ...
    def set_pad(self, *args, **kwargs) -> Any: ...
    def set_precision(self, *args, **kwargs) -> Any: ...

class TypeBitfieldID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_order(self, *args, **kwargs) -> Any: ...

class TypeCompositeID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_member_index(self, *args, **kwargs) -> Any: ...
    def get_member_name(self, *args, **kwargs) -> Any: ...
    def get_nmembers(self, *args, **kwargs) -> Any: ...

class TypeCompoundID(TypeCompositeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_member_class(self, *args, **kwargs) -> Any: ...
    def get_member_offset(self, *args, **kwargs) -> Any: ...
    def get_member_type(self, *args, **kwargs) -> Any: ...
    def insert(self, *args, **kwargs) -> Any: ...
    def pack(self, *args, **kwargs) -> Any: ...

class TypeEnumID(TypeCompositeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def enum_insert(self, *args, **kwargs) -> Any: ...
    def enum_nameof(self, *args, **kwargs) -> Any: ...
    def enum_valueof(self, *args, **kwargs) -> Any: ...
    def get_member_value(self, *args, **kwargs) -> Any: ...

class TypeFloatID(TypeAtomicID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_ebias(self, *args, **kwargs) -> Any: ...
    def get_fields(self, *args, **kwargs) -> Any: ...
    def get_inpad(self, *args, **kwargs) -> Any: ...
    def get_norm(self, *args, **kwargs) -> Any: ...
    def set_ebias(self, *args, **kwargs) -> Any: ...
    def set_fields(self, *args, **kwargs) -> Any: ...
    def set_inpad(self, *args, **kwargs) -> Any: ...
    def set_norm(self, *args, **kwargs) -> Any: ...

class TypeID(h5py._objects.ObjectID):
    dtype: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def commit(self, *args, **kwargs) -> Any: ...
    def committed(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def detect_class(self, *args, **kwargs) -> Any: ...
    def encode(self, *args, **kwargs) -> Any: ...
    def equal(self, *args, **kwargs) -> Any: ...
    def get_class(self, *args, **kwargs) -> Any: ...
    def get_create_plist(self, *args, **kwargs) -> Any: ...
    def get_size(self, *args, **kwargs) -> Any: ...
    def get_super(self, *args, **kwargs) -> Any: ...
    def lock(self, *args, **kwargs) -> Any: ...
    def set_size(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeIntegerID(TypeAtomicID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_sign(self, *args, **kwargs) -> Any: ...
    def set_sign(self, *args, **kwargs) -> Any: ...

class TypeOpaqueID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_tag(self, *args, **kwargs) -> Any: ...
    def set_tag(self, *args, **kwargs) -> Any: ...

class TypeReferenceID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class TypeStringID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_cset(self, *args, **kwargs) -> Any: ...
    def get_strpad(self, *args, **kwargs) -> Any: ...
    def is_variable_str(self, *args, **kwargs) -> Any: ...
    def set_cset(self, *args, **kwargs) -> Any: ...
    def set_strpad(self, *args, **kwargs) -> Any: ...

class TypeTimeID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class TypeVlenID(TypeID):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class string_info(NamedTuple):
    encoding: Any
    length: Any

def _get_float_dtype_to_hdf5(*args, **kwargs) -> Any: ...
def check_enum_dtype(*args, **kwargs) -> Any: ...
def check_opaque_dtype(*args, **kwargs) -> Any: ...
def check_ref_dtype(*args, **kwargs) -> Any: ...
def check_string_dtype(*args, **kwargs) -> Any: ...
def check_vlen_dtype(*args, **kwargs) -> Any: ...
def enum_dtype(*args, **kwargs) -> Any: ...
def get_config(*args, **kwargs) -> Any: ...
def opaque_dtype(*args, **kwargs) -> Any: ...
def py_create(*args, **kwargs) -> Any: ...
def string_dtype(*args, **kwargs) -> Any: ...
def typewrap(*args, **kwargs) -> Any: ...
def vlen_dtype(*args, **kwargs) -> Any: ...
def with_phil(*args, **kwargs) -> Any: ...
