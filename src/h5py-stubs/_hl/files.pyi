from typing import Any

from .. import h5, h5f, h5fd, h5i, h5p, version
from .base import phil, with_phil
from .compat import filename_decode, filename_encode
from .group import Group

mpi: Any
ros3: Any
hdf5_version: Any
swmr_support: bool
libver_dict: Any
libver_dict_r: Any

def register_driver(name, set_fapl) -> None: ...
def unregister_driver(name) -> None: ...
def registered_drivers(): ...
def make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0, **kwds): ...
def make_fcpl(
    track_order: bool = ...,
    fs_strategy: Any | None = ...,
    fs_persist: bool = ...,
    fs_threshold: int = ...,
): ...
def make_fid(
    name, mode, userblock_size, fapl, fcpl: Any | None = ..., swmr: bool = ...
): ...

class File(Group):
    @property
    def attrs(self): ...
    @property
    def filename(self): ...
    @property
    def driver(self): ...
    @property
    def mode(self): ...
    @property
    def libver(self): ...
    @property
    def userblock_size(self): ...
    @property
    def atomic(self): ...
    @atomic.setter
    def atomic(self, value) -> None: ...
    @property
    def swmr_mode(self): ...
    @swmr_mode.setter
    def swmr_mode(self, value) -> None: ...
    def __init__(
        self,
        name,
        mode: str = ...,
        driver: Any | None = ...,
        libver: Any | None = ...,
        userblock_size: Any | None = ...,
        swmr: bool = ...,
        rdcc_nslots: Any | None = ...,
        rdcc_nbytes: Any | None = ...,
        rdcc_w0: Any | None = ...,
        track_order: Any | None = ...,
        fs_strategy: Any | None = ...,
        fs_persist: bool = ...,
        fs_threshold: int = ...,
        **kwds
    ) -> None: ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
