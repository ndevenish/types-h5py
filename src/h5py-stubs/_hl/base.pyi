import abc
from collections.abc import ItemsView, KeysView, Mapping, MutableMapping, ValuesView
from typing import Any

from .. import h5d, h5f, h5i, h5p, h5r, h5s, h5t
from .._objects import phil as phil
from .._objects import with_phil as with_phil
from .compat import filename_encode, fspath

def is_hdf5(fname): ...
def find_item_type(data): ...
def guess_dtype(data): ...
def is_float16_dtype(dt): ...
def array_for_new_object(data, specified_dtype: Any | None = ...): ...
def default_lapl(): ...
def default_lcpl(): ...

dlapl: Any
dlcpl: Any

def is_empty_dataspace(obj): ...

class CommonStateObject: ...

class _RegionProxy:
    obj: Any
    id: Any
    def __init__(self, obj) -> None: ...
    def __getitem__(self, args): ...
    def shape(self, ref): ...
    def selection(self, ref): ...

class HLObject(CommonStateObject):
    @property
    def file(self): ...
    @property
    def name(self): ...
    @property
    def parent(self): ...
    @property
    def id(self): ...
    @property
    def ref(self): ...
    @property
    def regionref(self): ...
    @property
    def attrs(self): ...
    def __init__(self, oid) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __bool__(self): ...
    __nonzero__: Any
    def __getnewargs__(self) -> None: ...

class KeysViewHDF5(KeysView): ...

class ValuesViewHDF5(ValuesView):
    def __contains__(self, value): ...
    def __iter__(self): ...

class ItemsViewHDF5(ItemsView):
    def __contains__(self, item): ...
    def __iter__(self): ...

class MappingHDF5(Mapping, metaclass=abc.ABCMeta):
    def keys(self): ...
    def values(self): ...
    def items(self): ...

class MutableMappingHDF5(MappingHDF5, MutableMapping, metaclass=abc.ABCMeta): ...

class Empty:
    shape: Any
    size: Any
    dtype: Any
    def __init__(self, dtype) -> None: ...
    def __eq__(self, other): ...

def product(nums): ...
